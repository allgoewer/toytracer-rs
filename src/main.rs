#![forbid(unsafe_code)]
#![allow(dead_code)]

mod cam;
mod hit;
mod material;
mod ray;
mod vec3;

use cam::CameraBuilder;
use hit::{Hittable, Sphere};
use material::{Dielectric, Lambertian, Metal};
use rand::prelude::*;
use ray::Ray;
use rayon::prelude::*;
use std::io;
use std::sync::{self, atomic, Arc};
use std::thread;
use vec3::{Color, Point3, Vec3};

pub fn to_ppm<W: io::Write>(
    w: &mut W,
    values: impl Iterator<Item = Color>,
    width: usize,
    height: usize,
    samples_per_pixel: u32,
) -> io::Result<()> {
    writeln!(w, "P3")?;
    writeln!(w, "# Raytraced image generated by Maiks raytracer")?;
    writeln!(w, "{} {}\n255\n", width, height)?;

    let scale = 1.0 / samples_per_pixel as f64;

    for color in values {
        let (r, g, b) = color.xyz();

        // gamma-correct for gamma = 2.0, scale and clamp the rgb values
        let r = (r * scale).sqrt().clamp(0.0, 0.999);
        let g = (g * scale).sqrt().clamp(0.0, 0.999);
        let b = (b * scale).sqrt().clamp(0.0, 0.999);

        // convert rgb to u8
        let r = (r * 255.999) as u8;
        let g = (g * 255.999) as u8;
        let b = (b * 255.999) as u8;

        writeln!(w, "{} {} {}", r, g, b)?;
    }

    Ok(())
}

fn ray_color<H: Hittable>(ray: &Ray, world: H, depth: u32) -> Color {
    if depth == 0 {
        return Color::new(0.0, 0.0, 0.0);
    }

    if let Some(hr) = world.hit(&ray, 0.001, f64::INFINITY) {
        if let Some(scatter) = hr.mat().scatter(ray, &hr) {
            scatter.attenuation() * ray_color(scatter.scattered(), world, depth - 1)
        } else {
            Color::new(0.0, 0.0, 0.0)
        }
    } else {
        let unit_direction = ray.direction().unit();
        let t = 0.5 * (unit_direction.y() + 1.0);
        (1.0 - t) * Color::new(1.0, 1.0, 1.0) + t * Color::new(0.5, 0.7, 1.0)
    }
}

fn hit_sphere(center: Point3, radius: f64, ray: &Ray) -> f64 {
    let oc = ray.origin() - center;
    let a = ray.direction().length_squared();
    let half_b = oc.dot(ray.direction());
    let c = oc.length_squared() - radius * radius;
    let discriminant = half_b * half_b - a * c;

    if discriminant < 0.0 {
        -1.0
    } else {
        (-half_b - discriminant.sqrt()) / a
    }
}

fn main() -> std::io::Result<()> {
    let mut rng = thread_rng();

    // image
    let aspect_ratio = 3.0 / 2.0;
    let image_width = 400;
    let image_height = (image_width as f64 / aspect_ratio) as usize;
    let samples_per_pixel = 100;
    let max_depth = 50;

    // generate a random world

    let material_ground = Arc::new(Lambertian::new(Color::new(0.5, 0.5, 0.5)));

    let mut world = vec![Sphere::new(
        Point3::new(0.0, -1000.0, 0.0),
        1000.0,
        material_ground,
    )];

    for a in -11..11 {
        for b in -11..11 {
            let choose_mat = rng.gen_range(0.0..1.0);

            let center = Point3::new(
                a as f64 + 0.9 * rng.gen_range(0.0..1.0),
                0.2,
                b as f64 + 0.9 * rng.gen_range(0.0..1.0),
            );

            if (center - Point3::new(4.0, 0.2, 0.0)).length() > 0.9 {
                match choose_mat {
                    _ if choose_mat < 0.8 => {
                        // diffuse
                        let albedo = Color::random() * Color::random();
                        let material = Arc::new(Lambertian::new(albedo));
                        world.push(Sphere::new(center, 0.2, material));
                    }
                    _ if choose_mat < 0.95 => {
                        // metal
                        let albedo = Color::random_range(0.5..1.0);
                        let fuzz = rng.gen_range(0.0..0.5);
                        let material = Arc::new(Metal::new(albedo, fuzz));
                        world.push(Sphere::new(center, 0.2, material));
                    }
                    _ => {
                        // glass
                        let material = Arc::new(Dielectric::new(1.5));
                        world.push(Sphere::new(center, 0.2, material));
                    }
                }
            }
        }
    }

    let material1 = Arc::new(Dielectric::new(1.5));
    let material2 = Arc::new(Lambertian::new(Color::new(0.4, 0.2, 0.1)));
    let material3 = Arc::new(Metal::new(Color::new(0.7, 0.6, 0.5), 0.0));

    world.push(Sphere::new(Point3::new(0.0, 1.0, 0.0), 1.0, material1));
    world.push(Sphere::new(Point3::new(-4.0, 1.0, 0.0), 1.0, material2));
    world.push(Sphere::new(Point3::new(4.0, 1.0, 0.0), 1.0, material3));

    // camera
    let camera = &CameraBuilder::default()
        .look_from(Point3::new(13.0, 2.0, 3.0))
        .look_at(Point3::new(0.0, 0.0, 0.0))
        .view_up(Vec3::new(0.0, 1.0, 0.0))
        .vertical_fov(20.0)
        .aspect_ratio(aspect_ratio)
        .aperture(0.1)
        .focus_dist(10.0)
        .build();

    eprintln!("{:#?}", camera);
    eprintln!("Using {} raytracing threads", rayon::current_num_threads());

    // counter
    let counter = sync::Arc::new(atomic::AtomicI32::new(image_height as i32));

    // status thread, prints number of remaining lines to be calculated
    let join_handle = thread::spawn({
        let counter = counter.clone();
        move || loop {
            let count = counter.load(atomic::Ordering::Relaxed);
            eprintln!("{:4} lines remaining", count);

            if count <= 0 {
                break;
            }

            thread::sleep(std::time::Duration::from_millis(1_000));
        }
    });

    let world = &world;
    let img: Vec<_> = (0..image_height)
        .into_par_iter()
        .rev()
        .map(move |j| {
            counter.fetch_sub(1, atomic::Ordering::Relaxed);
            (0..image_width).into_par_iter().map(move |i| {
                let mut color = Color::new(0.0, 0.0, 0.0);
                let mut rng = thread_rng();

                for _ in 0..samples_per_pixel {
                    let u = (i as f64 + rng.gen_range(0.0..1.0)) / (image_width - 1) as f64;
                    let v = (j as f64 + rng.gen_range(0.0..1.0)) / (image_height - 1) as f64;

                    let ray = camera.get_ray(u, v);
                    color += ray_color(&ray, &world[..], max_depth);
                }

                color
            })
        })
        .flatten()
        .collect();

    join_handle.join().expect("Failed to join status thread");

    eprintln!("Outputting ppm image to stdout..");

    let stdout = std::io::stdout();
    to_ppm(
        &mut stdout.lock(),
        img.into_iter(),
        image_width,
        image_height,
        samples_per_pixel,
    )?;

    Ok(())
}
